type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    # machine = {"water": 0, "milk": 0, "bean": 0, "cup": 0, "money": 0}
    machine = [400, 540, 120, 9, 550]
    coffee_menu = {}
    method = ["buy", "fill", "take"]

    first_message = """
    The coffee machine has:
    {w} of water
    {m} of milk
    {b} of coffee beans
    {c} of disposable cups
    {mo} of money
    """


    def show_status():
        print(first_message.format(w=machine[0], m=machine[1], b=machine[2], c=machine[3], mo=machine[4]))


    def init():
        coffee_menu[1] = [250, 0, 16, 1, 4]
        coffee_menu[2] = [350, 75, 20, 1, 7]
        coffee_menu[3] = [200, 100, 12, 1, 6]

        show_status()


    def buy():
        having_elements = [machine[0], machine[1], machine[2], machine[3]]

        print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
        number = int(input("> "))
        if number not in [1, 2, 3]:
            print("no such coffee")
            return

        needed_coffee_elements = coffee_menu[number][:4]
        price = coffee_menu[number][4]
        how_can_coffee_list = []
        for has, need in zip(having_elements, needed_coffee_elements):
            if has == 0 or need == 0:
                how_can_coffee_list.append(has)
            else:
                how_can_coffee_list.append(has // need)
        max_coffee = min(how_can_coffee_list)

        if max_coffee < 1:
            print("No, I can make only {} cups of coffee".format(max_coffee))
        else:
            for i in range(4):
                machine[i] -= needed_coffee_elements[i]
            machine[4] += price
            show_status()


    def fill():
        print("Write how many ml of water the coffee machine add:")
        water = int(input("> "))

        print("Write how many ml of milk the coffee machine add:")
        milk = int(input("> "))

        print("Write how many grams of coffee beans the coffee machine add:")
        bean = int(input("> "))

        print("Write how many disposable cups of coffee do you want to add:")
        cup = int(input("> "))

        machine[0] += water
        machine[1] += milk
        machine[2] += bean
        machine[3] += cup

        show_status()


    def take():
        print("I gave you ${mo}".format(mo=machine[4]))
        machine[4] = 0
        show_status()


    def do_action():
        print("Write action (buy, fill, take):")
        action = input("> ")
        if action in method:
            eval(action)()
        else:
            print("no such action")


    def main():
        init()
        do_action()


    if __name__ == '__main__':
        main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
